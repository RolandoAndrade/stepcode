// Generated from src/StepCode.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class StepCodeLexer extends Lexer {
	public static readonly AND = 1;
	public static readonly ARRAY = 2;
	public static readonly BEGIN = 3;
	public static readonly BOOLEAN = 4;
	public static readonly CASE = 5;
	public static readonly CHAR = 6;
	public static readonly CHR = 7;
	public static readonly CONST = 8;
	public static readonly DIV = 9;
	public static readonly DO = 10;
	public static readonly DOWNTO = 11;
	public static readonly ELSE = 12;
	public static readonly END = 13;
	public static readonly FILE = 14;
	public static readonly FOR = 15;
	public static readonly FUNCTION = 16;
	public static readonly GOTO = 17;
	public static readonly IF = 18;
	public static readonly IN = 19;
	public static readonly INTEGER = 20;
	public static readonly LABEL = 21;
	public static readonly MOD = 22;
	public static readonly NIL = 23;
	public static readonly NOT = 24;
	public static readonly OF = 25;
	public static readonly OR = 26;
	public static readonly PACKED = 27;
	public static readonly PROCEDURE = 28;
	public static readonly PROGRAM = 29;
	public static readonly ENDPROGRAM = 30;
	public static readonly REAL = 31;
	public static readonly RECORD = 32;
	public static readonly REPEAT = 33;
	public static readonly SET = 34;
	public static readonly THEN = 35;
	public static readonly TO = 36;
	public static readonly TYPE = 37;
	public static readonly UNTIL = 38;
	public static readonly DEFINE = 39;
	public static readonly WHILE = 40;
	public static readonly WITH = 41;
	public static readonly PLUS = 42;
	public static readonly MINUS = 43;
	public static readonly STAR = 44;
	public static readonly SLASH = 45;
	public static readonly ASSIGN = 46;
	public static readonly COMMA = 47;
	public static readonly SEMI = 48;
	public static readonly COLON = 49;
	public static readonly EQUAL = 50;
	public static readonly NOT_EQUAL = 51;
	public static readonly LT = 52;
	public static readonly LE = 53;
	public static readonly GE = 54;
	public static readonly GT = 55;
	public static readonly LPAREN = 56;
	public static readonly RPAREN = 57;
	public static readonly LBRACK = 58;
	public static readonly LBRACK2 = 59;
	public static readonly RBRACK = 60;
	public static readonly RBRACK2 = 61;
	public static readonly POINTER = 62;
	public static readonly AT = 63;
	public static readonly DOT = 64;
	public static readonly DOTDOT = 65;
	public static readonly LCURLY = 66;
	public static readonly RCURLY = 67;
	public static readonly AS = 68;
	public static readonly UNIT = 69;
	public static readonly INTERFACE = 70;
	public static readonly USES = 71;
	public static readonly STRING = 72;
	public static readonly IMPLEMENTATION = 73;
	public static readonly TRUE = 74;
	public static readonly FALSE = 75;
	public static readonly WRITE = 76;
	public static readonly READ = 77;
	public static readonly WS = 78;
	public static readonly COMMENT_1 = 79;
	public static readonly COMMENT_2 = 80;
	public static readonly IDENT = 81;
	public static readonly STRING_LITERAL = 82;
	public static readonly NUM_INT = 83;
	public static readonly NUM_REAL = 84;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'AND'", 
                                                            "'ARRAY'", "'BEGIN'", 
                                                            null, null, 
                                                            null, "'CHR'", 
                                                            "'CONST'", "'DIV'", 
                                                            "'DO'", "'DOWNTO'", 
                                                            "'ELSE'", "'END'", 
                                                            "'FILE'", "'FOR'", 
                                                            "'FUNCTION'", 
                                                            "'GOTO'", "'SI'", 
                                                            "'IN'", null, 
                                                            "'LABEL'", "'MOD'", 
                                                            "'NIL'", "'NOT'", 
                                                            "'OF'", "'OR'", 
                                                            "'PACKED'", 
                                                            "'PROCEDURE'", 
                                                            null, null, 
                                                            "'REAL'", "'RECORD'", 
                                                            "'REPEAT'", 
                                                            "'SET'", "'THEN'", 
                                                            "'TO'", "'TYPE'", 
                                                            "'UNTIL'", null, 
                                                            "'WHILE'", "'WITH'", 
                                                            "'+'", "'-'", 
                                                            "'*'", "'/'", 
                                                            null, "','", 
                                                            "';'", "':'", 
                                                            "'='", "'<>'", 
                                                            "'<'", "'<='", 
                                                            "'>='", "'>'", 
                                                            "'('", "')'", 
                                                            "'['", "'(.'", 
                                                            "']'", "'.)'", 
                                                            "'^'", "'@'", 
                                                            "'.'", "'..'", 
                                                            "'{'", "'}'", 
                                                            "'COMO'", "'UNIT'", 
                                                            "'INTERFACE'", 
                                                            "'USES'", null, 
                                                            "'IMPLEMENTATION'", 
                                                            "'TRUE'", "'FALSE'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "AND", 
                                                             "ARRAY", "BEGIN", 
                                                             "BOOLEAN", 
                                                             "CASE", "CHAR", 
                                                             "CHR", "CONST", 
                                                             "DIV", "DO", 
                                                             "DOWNTO", "ELSE", 
                                                             "END", "FILE", 
                                                             "FOR", "FUNCTION", 
                                                             "GOTO", "IF", 
                                                             "IN", "INTEGER", 
                                                             "LABEL", "MOD", 
                                                             "NIL", "NOT", 
                                                             "OF", "OR", 
                                                             "PACKED", "PROCEDURE", 
                                                             "PROGRAM", 
                                                             "ENDPROGRAM", 
                                                             "REAL", "RECORD", 
                                                             "REPEAT", "SET", 
                                                             "THEN", "TO", 
                                                             "TYPE", "UNTIL", 
                                                             "DEFINE", "WHILE", 
                                                             "WITH", "PLUS", 
                                                             "MINUS", "STAR", 
                                                             "SLASH", "ASSIGN", 
                                                             "COMMA", "SEMI", 
                                                             "COLON", "EQUAL", 
                                                             "NOT_EQUAL", 
                                                             "LT", "LE", 
                                                             "GE", "GT", 
                                                             "LPAREN", "RPAREN", 
                                                             "LBRACK", "LBRACK2", 
                                                             "RBRACK", "RBRACK2", 
                                                             "POINTER", 
                                                             "AT", "DOT", 
                                                             "DOTDOT", "LCURLY", 
                                                             "RCURLY", "AS", 
                                                             "UNIT", "INTERFACE", 
                                                             "USES", "STRING", 
                                                             "IMPLEMENTATION", 
                                                             "TRUE", "FALSE", 
                                                             "WRITE", "READ", 
                                                             "WS", "COMMENT_1", 
                                                             "COMMENT_2", 
                                                             "IDENT", "STRING_LITERAL", 
                                                             "NUM_INT", 
                                                             "NUM_REAL" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"AND", "ARRAY", "BEGIN", "BOOLEAN", "CASE", "CHAR", "CHR", "CONST", "DIV", 
		"DO", "DOWNTO", "ELSE", "END", "FILE", "FOR", "FUNCTION", "GOTO", "IF", 
		"IN", "INTEGER", "LABEL", "MOD", "NIL", "NOT", "OF", "OR", "PACKED", "PROCEDURE", 
		"PROGRAM", "ENDPROGRAM", "REAL", "RECORD", "REPEAT", "SET", "THEN", "TO", 
		"TYPE", "UNTIL", "DEFINE", "WHILE", "WITH", "PLUS", "MINUS", "STAR", "SLASH", 
		"ASSIGN", "COMMA", "SEMI", "COLON", "EQUAL", "NOT_EQUAL", "LT", "LE", 
		"GE", "GT", "LPAREN", "RPAREN", "LBRACK", "LBRACK2", "RBRACK", "RBRACK2", 
		"POINTER", "AT", "DOT", "DOTDOT", "LCURLY", "RCURLY", "AS", "UNIT", "INTERFACE", 
		"USES", "STRING", "IMPLEMENTATION", "TRUE", "FALSE", "WRITE", "READ", 
		"WS", "COMMENT_1", "COMMENT_2", "IDENT", "STRING_LITERAL", "NUM_INT", 
		"NUM_REAL", "EXPONENT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, StepCodeLexer._ATN, StepCodeLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "StepCode.g4"; }

	public get literalNames(): (string | null)[] { return StepCodeLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return StepCodeLexer.symbolicNames; }
	public get ruleNames(): string[] { return StepCodeLexer.ruleNames; }

	public get serializedATN(): number[] { return StepCodeLexer._serializedATN; }

	public get channelNames(): string[] { return StepCodeLexer.channelNames; }

	public get modeNames(): string[] { return StepCodeLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,84,723,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,
	7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
	45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
	2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,
	60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,
	7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,
	74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,
	2,82,7,82,2,83,7,83,2,84,7,84,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
	2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
	3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,208,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
	4,3,4,218,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,232,8,
	5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
	10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
	1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
	15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
	1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,
	19,309,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,
	1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
	26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
	28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,375,8,28,1,29,1,29,1,29,
	1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
	29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
	3,29,409,8,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,
	31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,
	1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,
	37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,463,8,38,
	1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,42,1,
	42,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,491,8,45,
	1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,52,1,
	52,1,52,1,53,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,
	1,58,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,
	64,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,
	1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,
	70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,578,
	8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
	72,1,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,
	1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
	75,1,75,1,75,1,75,3,75,626,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
	3,76,636,8,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,1,78,5,78,646,8,78,10,
	78,12,78,649,9,78,1,78,1,78,1,79,1,79,5,79,655,8,79,10,79,12,79,658,9,79,
	1,79,1,79,1,80,1,80,5,80,664,8,80,10,80,12,80,667,9,80,1,81,1,81,1,81,1,
	81,5,81,673,8,81,10,81,12,81,676,9,81,1,81,1,81,1,81,1,81,1,81,5,81,683,
	8,81,10,81,12,81,686,9,81,1,81,3,81,689,8,81,1,82,4,82,692,8,82,11,82,12,
	82,693,1,83,4,83,697,8,83,11,83,12,83,698,1,83,1,83,4,83,703,8,83,11,83,
	12,83,704,1,83,3,83,708,8,83,3,83,710,8,83,1,83,3,83,713,8,83,1,84,1,84,
	3,84,717,8,84,1,84,4,84,720,8,84,11,84,12,84,721,0,0,85,1,1,3,2,5,3,7,4,
	9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
	35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
	59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
	83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
	53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,
	127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,
	74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,83,167,84,
	169,0,1,0,31,2,0,65,65,97,97,2,0,78,78,110,110,2,0,68,68,100,100,2,0,82,
	82,114,114,2,0,89,89,121,121,2,0,66,66,98,98,2,0,69,69,101,101,2,0,71,71,
	103,103,2,0,73,73,105,105,2,0,79,79,111,111,2,0,76,76,108,108,2,0,67,67,
	99,99,2,0,195,195,227,227,2,0,83,83,115,115,2,0,84,84,116,116,2,0,72,72,
	104,104,2,0,86,86,118,118,2,0,87,87,119,119,2,0,70,70,102,102,2,0,85,85,
	117,117,2,0,77,77,109,109,2,0,80,80,112,112,2,0,75,75,107,107,2,0,194,194,
	226,226,3,0,9,10,13,13,32,32,2,0,10,10,13,13,2,0,65,90,97,122,4,0,48,57,
	65,90,95,95,97,122,1,0,39,39,1,0,34,34,2,0,43,43,45,45,753,0,1,1,0,0,0,
	0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
	0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
	1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
	0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
	1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
	0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
	1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,
	0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
	1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
	0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
	0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
	123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,
	1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,
	0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,
	0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,0,163,1,0,0,
	0,0,165,1,0,0,0,0,167,1,0,0,0,1,171,1,0,0,0,3,175,1,0,0,0,5,181,1,0,0,0,
	7,207,1,0,0,0,9,217,1,0,0,0,11,231,1,0,0,0,13,233,1,0,0,0,15,237,1,0,0,
	0,17,243,1,0,0,0,19,247,1,0,0,0,21,250,1,0,0,0,23,257,1,0,0,0,25,262,1,
	0,0,0,27,266,1,0,0,0,29,271,1,0,0,0,31,275,1,0,0,0,33,284,1,0,0,0,35,289,
	1,0,0,0,37,292,1,0,0,0,39,308,1,0,0,0,41,310,1,0,0,0,43,316,1,0,0,0,45,
	320,1,0,0,0,47,324,1,0,0,0,49,328,1,0,0,0,51,331,1,0,0,0,53,334,1,0,0,0,
	55,341,1,0,0,0,57,374,1,0,0,0,59,408,1,0,0,0,61,410,1,0,0,0,63,415,1,0,
	0,0,65,422,1,0,0,0,67,429,1,0,0,0,69,433,1,0,0,0,71,438,1,0,0,0,73,441,
	1,0,0,0,75,446,1,0,0,0,77,462,1,0,0,0,79,464,1,0,0,0,81,470,1,0,0,0,83,
	475,1,0,0,0,85,477,1,0,0,0,87,479,1,0,0,0,89,481,1,0,0,0,91,490,1,0,0,0,
	93,492,1,0,0,0,95,494,1,0,0,0,97,496,1,0,0,0,99,498,1,0,0,0,101,500,1,0,
	0,0,103,503,1,0,0,0,105,505,1,0,0,0,107,508,1,0,0,0,109,511,1,0,0,0,111,
	513,1,0,0,0,113,515,1,0,0,0,115,517,1,0,0,0,117,519,1,0,0,0,119,522,1,0,
	0,0,121,524,1,0,0,0,123,527,1,0,0,0,125,529,1,0,0,0,127,531,1,0,0,0,129,
	533,1,0,0,0,131,536,1,0,0,0,133,538,1,0,0,0,135,540,1,0,0,0,137,545,1,0,
	0,0,139,550,1,0,0,0,141,560,1,0,0,0,143,577,1,0,0,0,145,579,1,0,0,0,147,
	594,1,0,0,0,149,599,1,0,0,0,151,625,1,0,0,0,153,635,1,0,0,0,155,637,1,0,
	0,0,157,641,1,0,0,0,159,652,1,0,0,0,161,661,1,0,0,0,163,688,1,0,0,0,165,
	691,1,0,0,0,167,696,1,0,0,0,169,714,1,0,0,0,171,172,7,0,0,0,172,173,7,1,
	0,0,173,174,7,2,0,0,174,2,1,0,0,0,175,176,7,0,0,0,176,177,7,3,0,0,177,178,
	7,3,0,0,178,179,7,0,0,0,179,180,7,4,0,0,180,4,1,0,0,0,181,182,7,5,0,0,182,
	183,7,6,0,0,183,184,7,7,0,0,184,185,7,8,0,0,185,186,7,1,0,0,186,6,1,0,0,
	0,187,188,7,5,0,0,188,189,7,9,0,0,189,190,7,9,0,0,190,191,7,10,0,0,191,
	192,7,6,0,0,192,193,7,0,0,0,193,208,7,1,0,0,194,195,7,10,0,0,195,196,7,
	9,0,0,196,197,7,7,0,0,197,198,7,8,0,0,198,199,7,11,0,0,199,208,7,9,0,0,
	200,201,7,10,0,0,201,202,7,12,0,0,202,203,5,8220,0,0,203,204,7,7,0,0,204,
	205,7,8,0,0,205,206,7,11,0,0,206,208,7,9,0,0,207,187,1,0,0,0,207,194,1,
	0,0,0,207,200,1,0,0,0,208,8,1,0,0,0,209,210,7,11,0,0,210,211,7,0,0,0,211,
	212,7,13,0,0,212,218,7,9,0,0,213,214,7,11,0,0,214,215,7,0,0,0,215,216,7,
	13,0,0,216,218,7,6,0,0,217,209,1,0,0,0,217,213,1,0,0,0,218,10,1,0,0,0,219,
	220,7,11,0,0,220,221,7,0,0,0,221,222,7,3,0,0,222,223,7,0,0,0,223,224,7,
	11,0,0,224,225,7,14,0,0,225,226,7,6,0,0,226,232,7,3,0,0,227,228,7,11,0,
	0,228,229,7,15,0,0,229,230,7,0,0,0,230,232,7,3,0,0,231,219,1,0,0,0,231,
	227,1,0,0,0,232,12,1,0,0,0,233,234,7,11,0,0,234,235,7,15,0,0,235,236,7,
	3,0,0,236,14,1,0,0,0,237,238,7,11,0,0,238,239,7,9,0,0,239,240,7,1,0,0,240,
	241,7,13,0,0,241,242,7,14,0,0,242,16,1,0,0,0,243,244,7,2,0,0,244,245,7,
	8,0,0,245,246,7,16,0,0,246,18,1,0,0,0,247,248,7,2,0,0,248,249,7,9,0,0,249,
	20,1,0,0,0,250,251,7,2,0,0,251,252,7,9,0,0,252,253,7,17,0,0,253,254,7,1,
	0,0,254,255,7,14,0,0,255,256,7,9,0,0,256,22,1,0,0,0,257,258,7,6,0,0,258,
	259,7,10,0,0,259,260,7,13,0,0,260,261,7,6,0,0,261,24,1,0,0,0,262,263,7,
	6,0,0,263,264,7,1,0,0,264,265,7,2,0,0,265,26,1,0,0,0,266,267,7,18,0,0,267,
	268,7,8,0,0,268,269,7,10,0,0,269,270,7,6,0,0,270,28,1,0,0,0,271,272,7,18,
	0,0,272,273,7,9,0,0,273,274,7,3,0,0,274,30,1,0,0,0,275,276,7,18,0,0,276,
	277,7,19,0,0,277,278,7,1,0,0,278,279,7,11,0,0,279,280,7,14,0,0,280,281,
	7,8,0,0,281,282,7,9,0,0,282,283,7,1,0,0,283,32,1,0,0,0,284,285,7,7,0,0,
	285,286,7,9,0,0,286,287,7,14,0,0,287,288,7,9,0,0,288,34,1,0,0,0,289,290,
	7,13,0,0,290,291,7,8,0,0,291,36,1,0,0,0,292,293,7,8,0,0,293,294,7,1,0,0,
	294,38,1,0,0,0,295,296,7,6,0,0,296,297,7,1,0,0,297,298,7,14,0,0,298,299,
	7,6,0,0,299,300,7,3,0,0,300,309,7,9,0,0,301,302,7,8,0,0,302,303,7,1,0,0,
	303,304,7,14,0,0,304,305,7,6,0,0,305,306,7,7,0,0,306,307,7,6,0,0,307,309,
	7,3,0,0,308,295,1,0,0,0,308,301,1,0,0,0,309,40,1,0,0,0,310,311,7,10,0,0,
	311,312,7,0,0,0,312,313,7,5,0,0,313,314,7,6,0,0,314,315,7,10,0,0,315,42,
	1,0,0,0,316,317,7,20,0,0,317,318,7,9,0,0,318,319,7,2,0,0,319,44,1,0,0,0,
	320,321,7,1,0,0,321,322,7,8,0,0,322,323,7,10,0,0,323,46,1,0,0,0,324,325,
	7,1,0,0,325,326,7,9,0,0,326,327,7,14,0,0,327,48,1,0,0,0,328,329,7,9,0,0,
	329,330,7,18,0,0,330,50,1,0,0,0,331,332,7,9,0,0,332,333,7,3,0,0,333,52,
	1,0,0,0,334,335,7,21,0,0,335,336,7,0,0,0,336,337,7,11,0,0,337,338,7,22,
	0,0,338,339,7,6,0,0,339,340,7,2,0,0,340,54,1,0,0,0,341,342,7,21,0,0,342,
	343,7,3,0,0,343,344,7,9,0,0,344,345,7,11,0,0,345,346,7,6,0,0,346,347,7,
	2,0,0,347,348,7,19,0,0,348,349,7,3,0,0,349,350,7,6,0,0,350,56,1,0,0,0,351,
	352,7,21,0,0,352,353,7,3,0,0,353,354,7,9,0,0,354,355,7,11,0,0,355,356,7,
	6,0,0,356,357,7,13,0,0,357,375,7,9,0,0,358,359,7,0,0,0,359,360,7,10,0,0,
	360,361,7,7,0,0,361,362,7,9,0,0,362,363,7,3,0,0,363,364,7,8,0,0,364,365,
	7,14,0,0,365,366,7,20,0,0,366,375,7,9,0,0,367,368,7,21,0,0,368,369,7,3,
	0,0,369,370,7,9,0,0,370,371,7,7,0,0,371,372,7,3,0,0,372,373,7,0,0,0,373,
	375,7,20,0,0,374,351,1,0,0,0,374,358,1,0,0,0,374,367,1,0,0,0,375,58,1,0,
	0,0,376,377,7,18,0,0,377,378,7,8,0,0,378,379,7,1,0,0,379,380,7,21,0,0,380,
	381,7,3,0,0,381,382,7,9,0,0,382,383,7,11,0,0,383,384,7,6,0,0,384,385,7,
	13,0,0,385,409,7,9,0,0,386,387,7,18,0,0,387,388,7,8,0,0,388,389,7,1,0,0,
	389,390,7,0,0,0,390,391,7,10,0,0,391,392,7,7,0,0,392,393,7,9,0,0,393,394,
	7,3,0,0,394,395,7,8,0,0,395,396,7,14,0,0,396,397,7,20,0,0,397,409,7,9,0,
	0,398,399,7,6,0,0,399,400,7,1,0,0,400,401,7,2,0,0,401,402,7,21,0,0,402,
	403,7,3,0,0,403,404,7,9,0,0,404,405,7,7,0,0,405,406,7,3,0,0,406,407,7,0,
	0,0,407,409,7,20,0,0,408,376,1,0,0,0,408,386,1,0,0,0,408,398,1,0,0,0,409,
	60,1,0,0,0,410,411,7,3,0,0,411,412,7,6,0,0,412,413,7,0,0,0,413,414,7,10,
	0,0,414,62,1,0,0,0,415,416,7,3,0,0,416,417,7,6,0,0,417,418,7,11,0,0,418,
	419,7,9,0,0,419,420,7,3,0,0,420,421,7,2,0,0,421,64,1,0,0,0,422,423,7,3,
	0,0,423,424,7,6,0,0,424,425,7,21,0,0,425,426,7,6,0,0,426,427,7,0,0,0,427,
	428,7,14,0,0,428,66,1,0,0,0,429,430,7,13,0,0,430,431,7,6,0,0,431,432,7,
	14,0,0,432,68,1,0,0,0,433,434,7,14,0,0,434,435,7,15,0,0,435,436,7,6,0,0,
	436,437,7,1,0,0,437,70,1,0,0,0,438,439,7,14,0,0,439,440,7,9,0,0,440,72,
	1,0,0,0,441,442,7,14,0,0,442,443,7,4,0,0,443,444,7,21,0,0,444,445,7,6,0,
	0,445,74,1,0,0,0,446,447,7,19,0,0,447,448,7,1,0,0,448,449,7,14,0,0,449,
	450,7,8,0,0,450,451,7,10,0,0,451,76,1,0,0,0,452,453,7,2,0,0,453,454,7,6,
	0,0,454,455,7,18,0,0,455,456,7,8,0,0,456,457,7,1,0,0,457,458,7,8,0,0,458,
	463,7,3,0,0,459,460,7,16,0,0,460,461,7,0,0,0,461,463,7,3,0,0,462,452,1,
	0,0,0,462,459,1,0,0,0,463,78,1,0,0,0,464,465,7,17,0,0,465,466,7,15,0,0,
	466,467,7,8,0,0,467,468,7,10,0,0,468,469,7,6,0,0,469,80,1,0,0,0,470,471,
	7,17,0,0,471,472,7,8,0,0,472,473,7,14,0,0,473,474,7,15,0,0,474,82,1,0,0,
	0,475,476,5,43,0,0,476,84,1,0,0,0,477,478,5,45,0,0,478,86,1,0,0,0,479,480,
	5,42,0,0,480,88,1,0,0,0,481,482,5,47,0,0,482,90,1,0,0,0,483,484,5,58,0,
	0,484,491,5,61,0,0,485,486,5,60,0,0,486,491,5,45,0,0,487,488,7,23,0,0,488,
	489,5,8224,0,0,489,491,5,65533,0,0,490,483,1,0,0,0,490,485,1,0,0,0,490,
	487,1,0,0,0,491,92,1,0,0,0,492,493,5,44,0,0,493,94,1,0,0,0,494,495,5,59,
	0,0,495,96,1,0,0,0,496,497,5,58,0,0,497,98,1,0,0,0,498,499,5,61,0,0,499,
	100,1,0,0,0,500,501,5,60,0,0,501,502,5,62,0,0,502,102,1,0,0,0,503,504,5,
	60,0,0,504,104,1,0,0,0,505,506,5,60,0,0,506,507,5,61,0,0,507,106,1,0,0,
	0,508,509,5,62,0,0,509,510,5,61,0,0,510,108,1,0,0,0,511,512,5,62,0,0,512,
	110,1,0,0,0,513,514,5,40,0,0,514,112,1,0,0,0,515,516,5,41,0,0,516,114,1,
	0,0,0,517,518,5,91,0,0,518,116,1,0,0,0,519,520,5,40,0,0,520,521,5,46,0,
	0,521,118,1,0,0,0,522,523,5,93,0,0,523,120,1,0,0,0,524,525,5,46,0,0,525,
	526,5,41,0,0,526,122,1,0,0,0,527,528,5,94,0,0,528,124,1,0,0,0,529,530,5,
	64,0,0,530,126,1,0,0,0,531,532,5,46,0,0,532,128,1,0,0,0,533,534,5,46,0,
	0,534,535,5,46,0,0,535,130,1,0,0,0,536,537,5,123,0,0,537,132,1,0,0,0,538,
	539,5,125,0,0,539,134,1,0,0,0,540,541,7,11,0,0,541,542,7,9,0,0,542,543,
	7,20,0,0,543,544,7,9,0,0,544,136,1,0,0,0,545,546,7,19,0,0,546,547,7,1,0,
	0,547,548,7,8,0,0,548,549,7,14,0,0,549,138,1,0,0,0,550,551,7,8,0,0,551,
	552,7,1,0,0,552,553,7,14,0,0,553,554,7,6,0,0,554,555,7,3,0,0,555,556,7,
	18,0,0,556,557,7,0,0,0,557,558,7,11,0,0,558,559,7,6,0,0,559,140,1,0,0,0,
	560,561,7,19,0,0,561,562,7,13,0,0,562,563,7,6,0,0,563,564,7,13,0,0,564,
	142,1,0,0,0,565,566,7,13,0,0,566,567,7,14,0,0,567,568,7,3,0,0,568,569,7,
	8,0,0,569,570,7,1,0,0,570,578,7,7,0,0,571,572,7,11,0,0,572,573,7,0,0,0,
	573,574,7,2,0,0,574,575,7,6,0,0,575,576,7,1,0,0,576,578,7,0,0,0,577,565,
	1,0,0,0,577,571,1,0,0,0,578,144,1,0,0,0,579,580,7,8,0,0,580,581,7,20,0,
	0,581,582,7,21,0,0,582,583,7,10,0,0,583,584,7,6,0,0,584,585,7,20,0,0,585,
	586,7,6,0,0,586,587,7,1,0,0,587,588,7,14,0,0,588,589,7,0,0,0,589,590,7,
	14,0,0,590,591,7,8,0,0,591,592,7,9,0,0,592,593,7,1,0,0,593,146,1,0,0,0,
	594,595,7,14,0,0,595,596,7,3,0,0,596,597,7,19,0,0,597,598,7,6,0,0,598,148,
	1,0,0,0,599,600,7,18,0,0,600,601,7,0,0,0,601,602,7,10,0,0,602,603,7,13,
	0,0,603,604,7,6,0,0,604,150,1,0,0,0,605,606,7,17,0,0,606,607,7,3,0,0,607,
	608,7,8,0,0,608,609,7,14,0,0,609,626,7,6,0,0,610,611,7,6,0,0,611,612,7,
	13,0,0,612,613,7,11,0,0,613,614,7,3,0,0,614,615,7,8,0,0,615,616,7,5,0,0,
	616,617,7,8,0,0,617,626,7,3,0,0,618,619,7,20,0,0,619,620,7,9,0,0,620,621,
	7,13,0,0,621,622,7,14,0,0,622,623,7,3,0,0,623,624,7,0,0,0,624,626,7,3,0,
	0,625,605,1,0,0,0,625,610,1,0,0,0,625,618,1,0,0,0,626,152,1,0,0,0,627,628,
	7,3,0,0,628,629,7,6,0,0,629,630,7,0,0,0,630,636,7,2,0,0,631,632,7,10,0,
	0,632,633,7,6,0,0,633,634,7,6,0,0,634,636,7,3,0,0,635,627,1,0,0,0,635,631,
	1,0,0,0,636,154,1,0,0,0,637,638,7,24,0,0,638,639,1,0,0,0,639,640,6,77,0,
	0,640,156,1,0,0,0,641,642,5,47,0,0,642,643,5,47,0,0,643,647,1,0,0,0,644,
	646,8,25,0,0,645,644,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,
	0,0,0,648,650,1,0,0,0,649,647,1,0,0,0,650,651,6,78,0,0,651,158,1,0,0,0,
	652,656,5,35,0,0,653,655,8,25,0,0,654,653,1,0,0,0,655,658,1,0,0,0,656,654,
	1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,656,1,0,0,0,659,660,6,79,0,
	0,660,160,1,0,0,0,661,665,7,26,0,0,662,664,7,27,0,0,663,662,1,0,0,0,664,
	667,1,0,0,0,665,663,1,0,0,0,665,666,1,0,0,0,666,162,1,0,0,0,667,665,1,0,
	0,0,668,674,5,39,0,0,669,670,5,39,0,0,670,673,5,39,0,0,671,673,8,28,0,0,
	672,669,1,0,0,0,672,671,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,674,675,
	1,0,0,0,675,677,1,0,0,0,676,674,1,0,0,0,677,689,5,39,0,0,678,684,5,34,0,
	0,679,680,5,34,0,0,680,683,5,34,0,0,681,683,8,29,0,0,682,679,1,0,0,0,682,
	681,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,687,1,0,
	0,0,686,684,1,0,0,0,687,689,5,34,0,0,688,668,1,0,0,0,688,678,1,0,0,0,689,
	164,1,0,0,0,690,692,2,48,57,0,691,690,1,0,0,0,692,693,1,0,0,0,693,691,1,
	0,0,0,693,694,1,0,0,0,694,166,1,0,0,0,695,697,2,48,57,0,696,695,1,0,0,0,
	697,698,1,0,0,0,698,696,1,0,0,0,698,699,1,0,0,0,699,712,1,0,0,0,700,702,
	5,46,0,0,701,703,2,48,57,0,702,701,1,0,0,0,703,704,1,0,0,0,704,702,1,0,
	0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,708,3,169,84,0,707,706,1,0,0,0,
	707,708,1,0,0,0,708,710,1,0,0,0,709,700,1,0,0,0,709,710,1,0,0,0,710,713,
	1,0,0,0,711,713,3,169,84,0,712,709,1,0,0,0,712,711,1,0,0,0,713,168,1,0,
	0,0,714,716,7,6,0,0,715,717,7,30,0,0,716,715,1,0,0,0,716,717,1,0,0,0,717,
	719,1,0,0,0,718,720,2,48,57,0,719,718,1,0,0,0,720,721,1,0,0,0,721,719,1,
	0,0,0,721,722,1,0,0,0,722,170,1,0,0,0,28,0,207,217,231,308,374,408,462,
	490,577,625,635,647,656,665,672,674,682,684,688,693,698,704,707,709,712,
	716,721,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!StepCodeLexer.__ATN) {
			StepCodeLexer.__ATN = new ATNDeserializer().deserialize(StepCodeLexer._serializedATN);
		}

		return StepCodeLexer.__ATN;
	}


	static DecisionsToDFA = StepCodeLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}